package main

import (
	"errors"
	"fmt"
	"sync"
	"time"
)

type MS struct {
	lock sync.RWMutex
	M    map[string]interface{}
}

type TimeConf struct {
	Timeout time.Duration `json:"timeout"`
}

func main() {

	wg := sync.WaitGroup{}
	for i := 0; i < 1; i++ {
		wg.Add(1)
		go func(i int) {
			defer wg.Done()
			if err := goroutine(i); err != nil {
				fmt.Println(err)
			}
		}(i)
	}
	wg.Wait()
}

func goroutine(i int) error {
	timout := time.Duration(150) * time.Millisecond
	result := make(chan map[string]interface{})
	errChan := make(chan error)
	go func(i int) {
		if (i+1)%13 == 0 {
			errChan <- fmt.Errorf("error:%v", i)
		} else {
			time.Sleep(time.Millisecond * 140)
			out := make(map[string]interface{})
			out["code"] = i
			result <- out
		}

	}(i)

	select {
	case res := <-result:

		fmt.Println("result:", res)
		return nil
	case <-time.After(timout):
		return errors.New("timeout")
	case err := <-errChan:
		return err
	}

}

func (m *MS) setMap(key string, value interface{}) {
	m.lock.Lock()
	defer m.lock.Unlock()
	if m.M == nil {
		m.M = make(map[string]interface{})
	}

	m.M[key] = value
}
